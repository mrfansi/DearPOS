// Mocks generated by Mockito 5.4.4 from annotations
// in app/test/features/product_management/data/repositories/product_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i7;

import 'package:app/core/network/network_info.dart' as _i9;
import 'package:app/features/product_management/data/datasources/product_local_data_source.dart'
    as _i8;
import 'package:app/features/product_management/data/datasources/product_remote_data_source.dart'
    as _i5;
import 'package:app/features/product_management/data/models/bulk_upload_result.dart'
    as _i3;
import 'package:app/features/product_management/data/models/product_bundle_model.dart'
    as _i4;
import 'package:app/features/product_management/data/models/product_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductModel_0 extends _i1.SmartFake implements _i2.ProductModel {
  _FakeProductModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBulkUploadResult_1 extends _i1.SmartFake
    implements _i3.BulkUploadResult {
  _FakeBulkUploadResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductBundleModel_2 extends _i1.SmartFake
    implements _i4.ProductBundleModel {
  _FakeProductBundleModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i5.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ProductModel>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i6.Future<List<_i2.ProductModel>>);

  @override
  _i6.Future<_i2.ProductModel> getProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.ProductModel>.value(_FakeProductModel_0(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.ProductModel>);

  @override
  _i6.Future<_i2.ProductModel> createProduct(_i2.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue: _i6.Future<_i2.ProductModel>.value(_FakeProductModel_0(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i6.Future<_i2.ProductModel>);

  @override
  _i6.Future<_i2.ProductModel> updateProduct(_i2.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i6.Future<_i2.ProductModel>.value(_FakeProductModel_0(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i6.Future<_i2.ProductModel>);

  @override
  _i6.Future<void> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i2.ProductModel>> searchProducts(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [query],
        ),
        returnValue:
            _i6.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i6.Future<List<_i2.ProductModel>>);

  @override
  _i6.Future<_i3.BulkUploadResult> bulkUploadProducts(_i7.File? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkUploadProducts,
          [file],
        ),
        returnValue:
            _i6.Future<_i3.BulkUploadResult>.value(_FakeBulkUploadResult_1(
          this,
          Invocation.method(
            #bulkUploadProducts,
            [file],
          ),
        )),
      ) as _i6.Future<_i3.BulkUploadResult>);

  @override
  _i6.Future<_i4.ProductBundleModel> createBundle(
          _i4.ProductBundleModel? bundle) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBundle,
          [bundle],
        ),
        returnValue:
            _i6.Future<_i4.ProductBundleModel>.value(_FakeProductBundleModel_2(
          this,
          Invocation.method(
            #createBundle,
            [bundle],
          ),
        )),
      ) as _i6.Future<_i4.ProductBundleModel>);

  @override
  _i6.Future<_i4.ProductBundleModel> updateBundle(
          _i4.ProductBundleModel? bundle) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBundle,
          [bundle],
        ),
        returnValue:
            _i6.Future<_i4.ProductBundleModel>.value(_FakeProductBundleModel_2(
          this,
          Invocation.method(
            #updateBundle,
            [bundle],
          ),
        )),
      ) as _i6.Future<_i4.ProductBundleModel>);

  @override
  _i6.Future<void> deleteBundle(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBundle,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.ProductBundleModel>> getBundles({
    int? limit,
    int? offset,
    bool? isActive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBundles,
          [],
          {
            #limit: limit,
            #offset: offset,
            #isActive: isActive,
          },
        ),
        returnValue: _i6.Future<List<_i4.ProductBundleModel>>.value(
            <_i4.ProductBundleModel>[]),
      ) as _i6.Future<List<_i4.ProductBundleModel>>);

  @override
  _i6.Future<_i4.ProductBundleModel> getBundle(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBundle,
          [id],
        ),
        returnValue:
            _i6.Future<_i4.ProductBundleModel>.value(_FakeProductBundleModel_2(
          this,
          Invocation.method(
            #getBundle,
            [id],
          ),
        )),
      ) as _i6.Future<_i4.ProductBundleModel>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i8.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ProductModel>> getLastProducts() => (super.noSuchMethod(
        Invocation.method(
          #getLastProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i6.Future<List<_i2.ProductModel>>);

  @override
  _i6.Future<void> cacheProducts(List<_i2.ProductModel>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProducts,
          [products],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.ProductModel?> getProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue: _i6.Future<_i2.ProductModel?>.value(),
      ) as _i6.Future<_i2.ProductModel?>);

  @override
  _i6.Future<void> cacheProduct(_i2.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProduct,
          [product],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}
